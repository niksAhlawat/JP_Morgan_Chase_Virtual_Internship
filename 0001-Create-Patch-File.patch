From d2d021a0f046ae627a90c05d8a89906cde99a6f0 Mon Sep 17 00:00:00 2001
From: Nikhil Ahlawat <nikhilahlawat.nikk@outlook.com>
Date: Sat, 13 Nov 2021 17:35:27 +0530
Subject: [PATCH] Create Patch File

---
 .vscode/launch.json | 17 +++++++++++++++++
 src/App.tsx         | 34 +++++++++++++++++++++++++---------
 src/Graph.tsx       | 16 +++++++++++-----
 3 files changed, 53 insertions(+), 14 deletions(-)
 create mode 100644 .vscode/launch.json

diff --git a/.vscode/launch.json b/.vscode/launch.json
new file mode 100644
index 0000000..63d678d
--- /dev/null
+++ b/.vscode/launch.json
@@ -0,0 +1,17 @@
+{
+    // Use IntelliSense to learn about possible attributes.
+    // Hover to view descriptions of existing attributes.
+    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
+    "version": "0.2.0",
+    "configurations": [
+
+
+        {
+            "type": "pwa-chrome",
+            "request": "launch",
+            "name": "Launch Chrome against localhost",
+            "url": "http://localhost:8080",
+            "webRoot": "${workspaceFolder}"
+        }
+    ]
+}
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..8b53bd9 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,31 +23,47 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
   /**
    * Render Graph react component with state.data parse as property data
    */
-  renderGraph() {
-    return (<Graph data={this.state.data}/>)
+   renderGraph() {
+    if (this.state.showGraph){
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // getData() gets the data from the server and when that process is complete
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+          // set showGraph to true
+          // as soon as the data from the server comes back to the requester
+        });
+      });
+      x++;
+      if (x > 1000){
+        clearInterval(interval);
+      }
+    },100);
   }
 
   /**
    * Render the App react component
    */
-  render() {
+   render() {
     return (
       <div className="App">
         <header className="App-header">
@@ -70,5 +87,4 @@ class App extends Component<{}, IState> {
     )
   }
 }
-
 export default App;
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..1488ec4 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -22,7 +22,7 @@ interface PerspectiveViewerElement {
  * React component that renders Perspective based on data
  * parsed from its parent through data property.
  */
-class Graph extends Component<IProps, {}> {
+ class Graph extends Component<IProps, {}> {
   // Perspective table
   table: Table | undefined;
 
@@ -32,8 +32,9 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
+    // the componentDidMount() method runs
+    // after the component output has been rendered to the DOM.
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
     const schema = {
       stock: 'string',
       top_ask_price: 'float',
@@ -46,9 +47,13 @@ class Graph extends Component<IProps, {}> {
     }
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
-
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates', `{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}`);
     }
   }
 
@@ -70,4 +75,5 @@ class Graph extends Component<IProps, {}> {
   }
 }
 
+
 export default Graph;
-- 
2.33.1.windows.1

